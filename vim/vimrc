set nocompatible
set noswapfile

set number
set numberwidth=5
set scl=no

set fillchars=vert:\|,fold:Â·

set ttyfast
set lazyredraw

set hidden
set clipboard=unnamedplus

set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

"Plugins
filetype off
set rtp+=~/.config/vim/bundle/Vundle.vim
call vundle#begin()
call vundle#rc("~/.config/vim/bundle")

Plugin 'VundleVim/Vundle.vim'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe', { 'do': 'python YouCompleteMe/install.py' }
Plugin 'SirVer/ultisnips'
" Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'mattn/emmet-vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'pangloss/vim-javasCRipt'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Plugin 'terryma/vim-smooth-scroll'

call vundle#end()

filetype plugin indent on
syntax enable
set autoindent

autocmd FileType text let b:did_indent = 1

autocmd BufNewFile,BufRead *.notes set filetype=notes
autocmd FileType notes source $HOME/.config/vim/lang/notes.vim

" autocmd BufRead,BufNewFile *.notes set filetype=notes
" autocmd Filetype notes source $MYVIMPATH/languages/notes.vim

"Plugin Config

"FZF.vim
let g:fzf_colors = {
			\ 'fg':['fg', 'Normal'],
			\ 'bg':['bg', 'CursorLine'],
			\ 'hl':['fg', 'Conditional'],
			\ 'fg+':['fg', 'LineNr'],
			\ 'bg+':['bg', 'CursorLine'],
			\ 'hl+':['fg', 'Conditional'],
			\ 'prompt':['fg', 'LineNr'],
			\ 'info':['fg', 'Comment'],
			\ 'pointer':['fg', 'Comment'],
			\ 'marker':['bg', 'Comment'],
			\ 'spinner':['fg', 'Number'],
			\ 'header':['fg', 'LineNr']
			\ }

" Vim-JavasCRipt
let g:javasCRipt_plugin_jsdoc=1

"SuperTab/YouCompleteMe/UltiSnips
let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType='<C-n>'

"YouCompleteMe
let g:ycm_max_num_candidates="4"
let g:ycm_min_num_of_chars_for_completion="2"

"UltiSnips
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
let UltiSnipsSnippetsDir="~/.vim/UltiSnips/"

"UltiSnips
let g:user_emmet_leader_key=","

"sdfSyntastic
let g:syntastic_loc_list_height=4
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_mode_map = { "mode": "active", "active_filetypes": [], "passive_filetypes": [] }
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javasCRipt_checkers = ['eslint']
let g:syntastic_javasCRipt_eslint_exe = 'npm run lint --'



"Status bar
set statusline=0
set noruler
set noshowcmd
set laststatus=2

let g:airline_theme='minimalist'
let g:airline_section_x=0
let g:airline_section_y=0
let g:airline_section_z=0

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


" Macros
let @a='vap:s/\s[0-9]\+/ @@@/g{/@@@ciw0,h@b'
let @b='viwynviwhp@b'


"Keybindings
nnoremap <C-e> :call <SID>SynStack()<CR>
nnoremap <Leader>w :set wrap!<CR>
nnoremap <Leader>n :edit ~/shared/notes/
nnoremap <Leader>s :source ~/.config/vim/vimrc<CR>
nnoremap <Leader>h :e<CR>
nnoremap <Leader>i :PluginInstall<CR>:PluginUpdate<CR>
nnoremap <Leader>l <ESC>:lopen<CR>
nnoremap <Leader>; <ESC>:lclose<CR>
nnoremap <Leader>f <ESC>:CallGrepAll
nnoremap <C-s> <ESC>:RemoveWhitespace<CR>:w<CR>:noh<CR>
nnoremap <C-b> <ESC>:!npm run build<CR>
nnoremap <C-q> <ESC>:q!<CR>
nnoremap <C-p> <ESC><C-s>:Files<CR>
nnoremap <Leader>p <ESC>:Ag
nnoremap <C-t> <ESC>:RemoveWhitespace<CR>:Format<CR>
imap <C-t> <ESC><C-t>
nnoremap <Leader>t <ESC>:RemoveWhitespace<CR>:Format<CR>
nnoremap <Leader><Leader> <ESC>:vert ter<CR>
nnoremap K mmi<CR><ESC>`m

nnoremap n nzz
nnoremap <S-n> <S-n>zz

nnoremap <Tab> :lnext<CR>
nnoremap <S-Tab> :lprev<CR>

nnoremap o o<ESC>
nnoremap O O<ESC>

nnoremap j gj
nnoremap k gk

nnoremap <left> <Nop>
nnoremap <right> <Nop>
inoremap <down> <Nop>
inoremap <left> <Nop>
inoremap <right> <Nop>
inoremap <up> <Nop>
vnoremap <down> <Nop>
vnoremap <left> <Nop>
vnoremap <right> <Nop>
vnoremap <up> <Nop>

nnoremap } }zz
nnoremap { {zz

" nnoremap <silent> <C-u> :call smooth_scroll#up(&scroll, 7, 2)<CR>
" nnoremap <silent> <C-d> :call smooth_scroll#down(&scroll, 7, 2)<CR>

nnoremap zo zO
nnoremap zx zX


"Color Config Mappings
inoremap \lb 189
inoremap \lg 188
inoremap \dg 243
inoremap \lo 224
inoremap \do 174
inoremap \r 160


"Split config
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright


"Fold config
set foldlevel=1
set foldmethod=indent
set nofoldenable


"Tabs
set tabstop=4
set shiftwidth=4
set noexpandtab
set smarttab


"Spacing
set nowrap
set linebreak
set backspace=indent,eol,start
set virtualedit+=block


"Search
set ignorecase
set incsearch
set smartcase "case sensitive if search has caps
set showmatch "live highlight search results
set hlsearch "highlight search results
set wildignore=*/node_modules/*,bundle*,*.git/*,*.wav

"Tags
set tags=tags;/,.tags;/


" Functions
command! Format :normal mtgg=G`tzz
command! RemoveWhitespace :%s/\s\+$//e

function! <SID>SynStack()
	if !exists("*synstack")
		return
	endif
	echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

command! -nargs=1 CallGrepAll :call GrepAll(<f-args>)
function! GrepAll(args)
	let cwd=getcwd()
	let pattern=a:args
	execute "lvimgrep /".pattern."/gj ".cwd."/**"
	execute "lopen"
endfunc

function! MyFoldText()
	let line = getline(v:foldstart)
	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart
	" expand tabs into spaces
	let onetab = strpart(' ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')
	let line = strpart(line, 0, windowwidth - 2 - len(foldedlinecount))
	let fillcharcount = windowwidth - len(line)

	return line . ' ' . foldedlinecount .' Lines }' . repeat(' ', fillcharcount)
endfun

set foldtext=MyFoldText()

colorscheme cadenpopps
